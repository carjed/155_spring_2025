---
title: "Solutions for 07. Simple linear regression: categorical predictor"
subtitle: "Notes and in-class exercises"
format: 
  html:
    embed-resources: true
    toc: true
---

```{r warning=FALSE, message=FALSE}
# Load packages and import data
library(ggplot2)
library(dplyr)

data(diamonds)

# A little bit of data wrangling code - let's not focus on this for now
diamonds <- diamonds %>% 
    mutate(
        cut = factor(cut, ordered = FALSE),
        color = factor(color, ordered = FALSE),
        clarity = factor(clarity, ordered = FALSE)
    )
```

## Exercise 1: Get to know the data

- A case represents a single diamond.
- The distribution of price is right skewed with considerable high outliers. The right skew is evidenced by the mean price (\$3932) being much higher than the median price (\$2401).
- Most diamonds in this data are of Good cut or better. Ideal cut diamonds are the most common with each succesive grade being the next most common.


```{r}
dim(diamonds)

head(diamonds)

# Visualize price (outcome variable)
ggplot(diamonds, aes(x = price)) +
    geom_histogram()
ggplot(diamonds, aes(y = price)) +
    geom_boxplot()
diamonds %>%
    summarize(mean(price), median(price), sd(price))

# Visualize cut (predictor variable)
ggplot(diamonds, aes(x = cut)) +
    geom_bar()
diamonds %>% 
    count(cut)
```




## Exercise 2: Visualizations

Start by visualizing this relationship of interest, that between `price` and `cut`.

a. We just don't see anything clearly on a scatterplot. With the small number of unique values of the predictor variable, all of the points are bunched up on each other.

```{r}
# Try a scatterplot
ggplot(diamonds, aes(y = price, x = cut)) + 
    geom_point()
```

b. Separately run each chunk below, with two plots. Comment (`#`) on what changes in the code / output.

```{r}
# Univariate boxplot
ggplot(diamonds, aes(y = price)) + 
    geom_boxplot()
```

```{r}
# Separate boxes by category
ggplot(diamonds, aes(y = price, x = cut)) + 
    geom_boxplot()
```

```{r}
# Univariate density plot
ggplot(diamonds, aes(x = price)) + 
    geom_density()
```

```{r}
# Separate density plots by category
ggplot(diamonds, aes(x = price, color = cut)) + 
    geom_density()
```

```{r}
# Univariate histogram
ggplot(diamonds, aes(x = price)) + 
    geom_histogram()
```

```{r}
# Separate histograms by category
ggplot(diamonds, aes(x = price)) + 
    geom_histogram() + 
    facet_wrap(~ cut)
```

c. The relationship between price and cut seems to be opposite what we would expect. The diamonds with the best cut (Ideal) have the lowest average price, and the ones with the worst cut (Fair) are woth the most. Maybe something else is different between the diamonds with the best and worst cuts...size maybe?



## Exercise 3: Numerical summaries

Let's follow up our plots with some numerical summaries.

a. Mean `price` across all diamonds:

```{r}
diamonds %>% 
    summarize(mean(price))
```

b. Mean `price` for each type of `cut`:

```{r}
diamonds %>% 
    group_by(cut) %>% 
    summarize(mean(price))
```

c. Group means should reflect what you see in the plots (easiest to see in the boxplots)

d. Create our new `cutFair` variable:

```{r}
diamonds <- diamonds %>%
  mutate(cutFair=ifelse(cut == "Fair", 1, 0))
```

e. Calculate the group means based on this new variable

```{r}
diamonds %>% 
    group_by(cutFair) %>% 
    summarize(mean(price))
```

## Exercise 4: Modeling trend using a categorical predictor with exactly 2 categories 

```{r}
# Construct the model
diamond_mod0 <- lm(price ~ cutFair, data = diamonds)

# Summarize the model
coef(summary(diamond_mod0))
```

The intercept is the expected value (mean) of the price for all diamonds with a cut quality that isn't Fair (Good, Very Good, Premium, or Ideal, i.e. when `cutFair` = 0)--the same as we saw in exercise 3e. 

c. When we add the intercept and coefficient for `cutFair`, we get `3919.69 + 439.06 = 4358.75`--this is the mean price for all diamonds with a Fair cut quality that we saw in exercise 3e! Therefore, the coefficient of `cutFair` (439.06) is interpreted as the difference between the mean value of diamonds with a Fair cut quality and the mean value of diamonds with a higher cut quality.

## Exercise 5: Modeling trend using a categorical predictor with >2 categories 

```{r}
# Construct the model
diamond_mod <- lm(price ~ cut, data = diamonds)

# Summarize the model
coef(summary(diamond_mod))
```

a. We are seeing 4 coefficient estimates because each category is being assigned to a separate indicator variable--`cutGood` = 1 when `cut == "Good"` and 0 otherwise, `cutVery Good` = 1 when `cut == "Very Good" and 0 otherwise, and so on.

b. E[price | cut] = 4358.7578 - 429.8933 cutGood - 376.9979 cutVery Good + 225.4999 cutPremium - 901.2158 cutIdeal



## Exercise 6: Making sense of the model

a. Expected/typical price for diamonds of *Good* cut:

E[price | cut] = 4358.7578 - 429.8933 * 1 - 376.9979 * 0 + 225.4999 * 0 - 901.2158 * 0 = 4358.7578 - 429.8933 = \$3928.865

```{r}
predict(diamond_mod, newdata = data.frame(cut = "Good"))
```

b. Expected/typical price for diamonds of *Fair* cut:

E[price | cut] = 4358.7578 - 429.8933 * 0 - 376.9979 * 0 + 225.4999 * 0 - 901.2158 * 0 = \$4358.7578

```{r}
predict(diamond_mod, newdata = data.frame(cut = "Fair"))
```

c. These come from our group mean calculations in Exercise 3b! The predicted value for diamonds of *Fair* cut is also the same as what we obtained using the SLR model in exercise 4 with only a single `cutFair` indicator variable.


## Exercise 7: Interpreting coefficients

Recall that our model formula is *not a formula for a line*. Thus we can't interpret the coefficients as "slopes" as we have before. Taking this into account and reflecting upon your calculations above...   

a. The average price of a Fair cut diamonds is \$4358.7578.

b.
    - Interpretation of `cutGood` coefficient: On average, Good cut diamonds are worth \$429.89 less than Fair cut diamonds.
    - Interpretation of `cutVery Good` coefficient: On average, Very Good cut diamonds are worth \$377.00 less than Fair cut diamonds.



## Exercise 8: Modeling choices (CHALLENGE)

Why do we fit this model in this way (using 4 indicator variables `cutGood`,  `cutVery Good`, `cutPremium`, `cutIdeal`)? Instead, suppose that we created a single variable `cutCat` that gave each category a numerical value: 0 for Fair, 1 for Good, 2 for Very Good, 3 for Premium, and 4 for Ideal.

- If we used 0-4 instead of creating indicator variables, we would be constraining the change from 0 to 1, from 1 to 2, etc. to always be of the same magnitude. That is, a 1 unit change in the cut variable would always have the same change in price in our model.
- Using separate indicator variables allows the difference between subsequent categories to be different, which allows our model to be a bit more nuanced. It is possible to take nuance too far though. For example, in our previous investigations of bikeshare data, we modeled ridership versus temperature. We treated temperature as a quantitative predictor. Imagine if we had created an indicator variable for each unique temperature in the data---that would be so many variables! Having so many variables creates a very complex model which can be hard to make sense of. (These ideas are addressed further in STAT 253: Statistical Machine Learning!)



## Exercise 9: Diamond color

Consider modeling `price` by `color`.

- The best color diamonds are J, and worst are D. We would expect D diamonds to have the lowest price and increase steadily as we get to J. This is in fact what we see in the boxplots.

```{r}
ggplot(diamonds, aes(x = color, y = price)) +
    geom_boxplot()

diamonds %>% 
    group_by(color) %>% 
    summarize(mean(price))
```


- We fit a linear model and obtain the model formula: E[price | color] = 3169.95 - 93.20 colorE + 554.93 colorF + 829.18 colorG + 1316.72 colorH + 1921.92 colorI + 2153.86 colorJ

```{r}
diamond_mod2 <- lm(price ~ color, data = diamonds)

coef(summary(diamond_mod2))
```


- Color D is the reference level because we don't see its indicator variable in the model output.
- Interpretation of the intercept: Diamonds with D color cost \$3169.95 on average.
- Interpretation of the `colorE` coefficient: Diamonds with E color cost \$93.20 **less** than D color diamonds on average.
- Interpretation of the `colorF` coefficient: Diamonds with F color cost \$554.93 **more** than D color diamonds on average.



## Exercise 10: Diamond clarity

We see the unexpected result that diamonds of better clarity (VS1 and higher) have lower average prices. In fact the best clarity diamonds (VVS1 and IF) have the *lowest* average prices. What might be going on? What if the most clear diamonds were also quite small...

```{r}
ggplot(diamonds, aes(x = clarity, y = price)) +
    geom_boxplot()

diamonds %>% 
    group_by(clarity) %>% 
    summarize(mean(price))

diamond_mod3 <- lm(price ~ clarity, data = diamonds)

coef(summary(diamond_mod3))
```



